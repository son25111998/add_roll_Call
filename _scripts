<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {

        // --- LOGIC CHO TAB HỌC PHÍ (TUITION) ---
        const addFeeForm = document.getElementById('add-other-fee-form');
        if (addFeeForm) {
            addFeeForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                formData.append('action', 'add_other_fee');
                fetch('ajax_handler.php', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.href = 'dashboard.php?tab=tuition&month=<?= $month ?>';
                        } else {
                            alert('Lỗi: ' + (data.message || 'Không thể thêm phí.'));
                        }
                    });
            });
        }

        const feesTableBody = document.getElementById('other-fees-table-body');
        if (feesTableBody) {
            feesTableBody.addEventListener('click', function(e) {
                if (e.target.closest('.delete-fee-btn')) {
                    const button = e.target.closest('.delete-fee-btn');
                    const feeId = button.dataset.feeId;
                    if (confirm('Bạn có chắc chắn muốn xóa khoản phí này?')) {
                        const formData = new FormData();
                        formData.append('action', 'delete_other_fee');
                        formData.append('fee_id', feeId);
                        fetch('ajax_handler.php', {
                                method: 'POST',
                                body: formData
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    window.location.href = 'dashboard.php?tab=tuition&month=<?= $month ?>';
                                } else {
                                    alert('Lỗi: ' + (data.message || 'Không thể xóa phí.'));
                                }
                            });
                    }
                }
            });
        }

        // --- LOGIC CHO TAB TỔNG QUAN (OVERVIEW) ---
        const ctx = document.getElementById('revenueChart');
        if (ctx) {
            const revenueData = <?= json_encode($revenue_data) ?>;
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: revenueData.map(row => row.class_name),
                    datasets: [{
                        label: 'Doanh thu (VNĐ)',
                        data: revenueData.map(row => row.total_paid),
                        backgroundColor: 'rgba(0, 121, 107, 0.6)'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
        }

        // --- LOGIC CHUNG CHO CÁC MODAL (TÀI KHOẢN) ---
        const discountModalEl = document.getElementById('editDiscountModal');
        if (discountModalEl) {
            const discountTypeSelect = document.getElementById('discount-type');
            const discountValueWrapper = document.getElementById('discount-value-wrapper');
            const discountValueInput = document.getElementById('discount-value');

            discountTypeSelect.addEventListener('change', function() {
                if (this.value === 'percentage' || this.value === 'fixed') {
                    discountValueWrapper.style.display = 'block';
                    discountValueInput.required = true;
                } else {
                    discountValueWrapper.style.display = 'none';
                    discountValueInput.required = false;
                }
            });

            discountModalEl.addEventListener('show.bs.modal', function(event) {
                const button = event.relatedTarget;
                document.getElementById('edit-parent-id').value = button.dataset.parentId;
                document.getElementById('parent-phone-display').textContent = button.dataset.phone;
                discountTypeSelect.value = button.dataset.type;
                discountValueInput.value = button.dataset.value;
                discountTypeSelect.dispatchEvent(new Event('change'));
            });
        }

        const addTeacherModalEl = document.getElementById('addTeacherModal');
        if (addTeacherModalEl) {
            const addTeacherModal = new bootstrap.Modal(addTeacherModalEl);
            const addTeacherForm = document.getElementById('add-teacher-form');
            addTeacherForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(addTeacherForm);
                const alertEl = document.getElementById('add-teacher-alert');
                fetch('ajax_handler.php', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        alertEl.textContent = data.message;
                        alertEl.className = data.success ? 'alert alert-success' : 'alert alert-danger';
                        alertEl.classList.remove('d-none');
                        if (data.success) {
                            setTimeout(() => {
                                addTeacherModal.hide();
                                window.location.href = 'dashboard.php?tab=accounts';
                            }, 1000);
                        }
                    });
            });
        }

        const editTeacherModalEl = document.getElementById('editTeacherModal');
        if (editTeacherModalEl) {
            const editTeacherModal = new bootstrap.Modal(editTeacherModalEl);
            const editTeacherForm = document.getElementById('edit-teacher-form');

            document.querySelectorAll('.edit-teacher-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const teacherId = this.dataset.teacherId;
                    fetch(`ajax_handler.php?action=get_teacher_details&teacher_id=${teacherId}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                document.getElementById('edit_teacher_id').value = data.data.teacher_id;
                                document.getElementById('edit_teacher_name').value = data.data.name;
                                document.getElementById('edit_teacher_email').value = data.data.email;
                                editTeacherModal.show();
                            } else {
                                alert(data.message);
                            }
                        });
                });
            });

            editTeacherForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(editTeacherForm);
                const alertEl = document.getElementById('edit-teacher-alert');
                fetch('ajax_handler.php', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        alertEl.textContent = data.message;
                        alertEl.className = data.success ? 'alert alert-success' : 'alert alert-danger';
                        alertEl.classList.remove('d-none');
                        if (data.success) {
                            setTimeout(() => {
                                editTeacherModal.hide();
                                window.location.href = 'dashboard.php?tab=accounts';
                            }, 1000);
                        }
                    });
            });
        }


        // function convertToDateFormat(dateStr) {
        //     const [day, month, year] = dateStr.split('-');
        //     return `${year}${month}-${day}`;
        // }

        const editTeacherbonusModalEl = document.getElementById('editTeacherBonusModal');
        if (editTeacherbonusModalEl) {
            const editTeacherbonusModal = new bootstrap.Modal(editTeacherbonusModalEl);
            const editTeacherbonusForm = document.getElementById('edit-teacher-bonus-form');

            document.querySelectorAll('.edit-teacher-bonus-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const teacher_bonus_id = this.dataset.teacherId;
                    console.log("dataset", this.dataset);
                    console.log("teacherId", teacher_bonus_id);
                    fetch(`ajax_handler.php?action=get_teacher_bonus_details&teacher_id=${teacher_bonus_id}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // console.log("data", data.data);
                                // console.log("data amount", data.data.effective_from);
                                document.getElementById('edit_teacher_bonus_id').value = data.data.id;
                                document.getElementById('bonus_teacher_id').value = data.data.teacher_id;
                                document.getElementById('edit_bonus_amount').value = data.data.bonus_amount;
                                document.getElementById('edit_bonus_reason').value = data.data.bonus_reason;
                                document.getElementById('edit_effective_from').value = data.data.effective_from;
                                document.getElementById('edit_effective_to').value = data.data.effective_to;
                                editTeacherbonusModal.show();
                            } else {
                                alert(data.message);
                            }
                        });
                });
            });

            editTeacherbonusForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(editTeacherbonusForm);

                // console.log("teacher_bonus_id:", formData.get('teacher_bonus_id'));
                // console.log("user_id:", formData.get('bonus_teacher_id'));
                // console.log("bonus_amount:", formData.get('bonus_amount'));
                // console.log("bonus_reason:", formData.get('bonus_reason'));
                // console.log("effective_from:", formData.get('effective_from'));
                // console.log("effective_to:", formData.get('effective_to'));

                const alertEl = document.getElementById('edit-teacher-bonus-alert');
                fetch('ajax_handler.php', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        // console.log("data:", data);
                        // console.log("message:", data.message);
                        alertEl.textContent = data.message;
                        alertEl.className = data.success ? 'alert alert-success' : 'alert alert-danger';
                        alertEl.classList.remove('d-none');
                        if (data.success) {
                            setTimeout(() => {
                                editTeacherbonusModal.hide();
                                window.location.href = 'dashboard.php?tab=bonus';
                            }, 1000);
                        }
                    });
            });
        }

        // --- LOGIC CHO TAB GÓI HỌC PHÍ (PACKAGES) ---
        if (document.getElementById('browse-class-panel')) {
            let selectedStudentId = null;
            const container = $('#enrollment-details-container');
            const initialMsg = $('#initial-message');
            const enrollmentsList = $('#enrollments-list');
            const enrollmentTemplate = $('#enrollment-card-template').html();
            const studentNameDisplay = $('#selected-student-name');
            const classListContainer = $('#class-accordion-for-selection');

            // *** SỬA LỖI: Logic mới để xử lý sự kiện click một cách đáng tin cậy ***
            classListContainer.on('click', '.view-student-packages-btn', function(e) {
                e.preventDefault();
                e.stopPropagation(); // Ngăn sự kiện lan tỏa, tránh xung đột

                const clickedButton = $(this);
                const studentId = clickedButton.data('student-id');
                const studentName = clickedButton.data('student-name');

                // Bỏ tô sáng tất cả các mục khác
                classListContainer.find('.list-group-item').removeClass('selected');

                // Tô sáng mục được chọn
                clickedButton.closest('.list-group-item').addClass('selected');

                // Cập nhật học sinh đang được chọn
                selectedStudentId = studentId;

                // Cập nhật giao diện và tải dữ liệu
                studentNameDisplay.text(studentName);
                container.removeClass('d-none');
                initialMsg.addClass('d-none');
                loadEnrollments(selectedStudentId);

                // Cuộn đến container để xem kết quả
                $('html, body').animate({
                    scrollTop: container.offset().top - 20
                }, 300);
            });

            function loadEnrollments(studentId) {
                enrollmentsList.html('<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Đang tải...</div>');
                $.getJSON('ajax_handler.php', {
                        action: 'get_student_enrollments',
                        student_id: studentId
                    })
                    .done(function(data) {
                        enrollmentsList.empty();
                        if (data.success && data.enrollments.length > 0) {
                            const accordion = $('<div class="accordion" id="enrollments-list-accordion"></div>');
                            data.enrollments.forEach(enroll => {
                                let card = enrollmentTemplate;
                                card = card.replace(/{enrollment_id}/g, enroll.package_id)
                                    .replace('{course_name}', enroll.course_name)
                                    .replace('{total_fee}', new Intl.NumberFormat().format(enroll.total_fee))
                                    .replace('{amount_paid}', new Intl.NumberFormat().format(enroll.amount_paid))
                                    .replace('{total_sessions}', enroll.total_sessions)
                                    .replace('{remaining_sessions}', enroll.remaining_sessions);

                                let statusBadge = '';
                                switch (enroll.status) {
                                    case 'active':
                                        statusBadge = '<span class="badge bg-success">Đang hoạt động</span>';
                                        break;
                                    case 'completed':
                                        statusBadge = '<span class="badge bg-secondary">Đã hoàn thành</span>';
                                        break;
                                    case 'cancelled':
                                        statusBadge = '<span class="badge bg-danger">Đã hủy</span>';
                                        break;
                                }
                                card = card.replace('{status_badge}', statusBadge);

                                const $card = $(card);

                                let installmentsHtml = '';
                                enroll.installments.forEach(inst => {
                                    let statusText = '';
                                    let actionBtn = '';
                                    switch (inst.status) {
                                        case 'pending':
                                            statusText = '<span class="badge bg-warning text-dark">Chờ thanh toán</span>';
                                            actionBtn = `<button class="btn btn-sm btn-success record-payment-btn" data-installment-id="${inst.installment_id}"><i class="fas fa-check"></i> Ghi nhận</button>`;
                                            break;
                                        case 'paid':
                                            statusText = '<span class="badge bg-success">Đã thanh toán</span>';
                                            break;
                                        case 'overdue':
                                            statusText = '<span class="badge bg-danger">Quá hạn</span>';
                                            actionBtn = `<button class="btn btn-sm btn-success record-payment-btn" data-installment-id="${inst.installment_id}"><i class="fas fa-check"></i> Ghi nhận</button>`;
                                            break;
                                    }
                                    installmentsHtml += `<tr>
                                        <td>${new Intl.NumberFormat().format(inst.amount_due)}</td>
                                        <td>${new Date(inst.due_date).toLocaleDateString('vi-VN')}</td>
                                        <td>${statusText}</td>
                                        <td class="text-center">${actionBtn}</td>
                                    </tr>`;
                                });
                                if (installmentsHtml === '') {
                                    installmentsHtml = '<tr><td colspan="4" class="text-center text-muted">Chưa có đợt thanh toán nào.</td></tr>';
                                }
                                $card.find('.installments-table-body').html(installmentsHtml);
                                accordion.append($card);
                            });
                            enrollmentsList.append(accordion);
                        } else {
                            enrollmentsList.html('<div class="alert alert-light text-center">Học sinh này chưa được đăng ký khóa học nào.</div>');
                        }
                    })
                    .fail(() => {
                        enrollmentsList.html('<div class="alert alert-danger">Lỗi khi tải dữ liệu.</div>');
                    });
            }

            enrollmentsList.on('click', '.add-installment-btn', function() {
                const enrollmentId = $(this).data('enrollment-id');
                $('#installment_enrollment_id').val(enrollmentId);
                const addInstallmentModal = new bootstrap.Modal(document.getElementById('addInstallmentModal'));
                addInstallmentModal.show();
            });

            enrollmentsList.on('click', '.record-payment-btn', function() {
                if (!confirm('Bạn có chắc chắn muốn ghi nhận thanh toán cho đợt này? Hành động này sẽ kích hoạt buổi học tương ứng.')) return;
                const installmentId = $(this).data('installment-id');
                $.post('ajax_handler.php', {
                        action: 'record_payment',
                        installment_id: installmentId
                    }, 'json')
                    .done(data => {
                        alert(data.message);
                        if (data.success) {
                            loadEnrollments(selectedStudentId);
                        }
                    })
                    .fail(() => alert('Lỗi máy chủ.'));
            });

            $('#create-enrollment-form').on('submit', function(e) {
                e.preventDefault();
                handleFormSubmit(this, 'create_enrollment', '#createEnrollmentModal');
            });
            $('#add-installment-form').on('submit', function(e) {
                e.preventDefault();
                handleFormSubmit(this, 'add_installment', '#addInstallmentModal');
            });

            function handleFormSubmit(form, action, modalId) {
                const formData = new FormData(form);
                formData.append('action', action);
                formData.append('student_id', selectedStudentId);

                $.ajax({
                    url: 'ajax_handler.php',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    dataType: 'json'
                }).done(data => {
                    alert(data.message);
                    if (data.success) {
                        bootstrap.Modal.getInstance(document.querySelector(modalId)).hide();
                        loadEnrollments(selectedStudentId);
                    }
                }).fail(() => alert('Lỗi máy chủ.'));
            }
        }
        const addFamilyModalEl = document.getElementById('addFamilyModal');
        if (addFamilyModalEl) {
            const addFamilyModal = new bootstrap.Modal(addFamilyModalEl);
            const studentFieldsContainer = document.getElementById('student-fields-container');
            const studentTemplate = document.getElementById('student-field-template').innerHTML;

            function addNewStudentField() {
                studentFieldsContainer.insertAdjacentHTML('beforeend', studentTemplate);
            }

            document.getElementById('add-student-field-btn').addEventListener('click', addNewStudentField);

            studentFieldsContainer.addEventListener('click', function(e) {
                if (e.target.classList.contains('remove-student-field-btn')) {
                    e.target.closest('.student-entry').remove();
                }
            });

            // Thêm một học sinh khi modal mở ra lần đầu
            addFamilyModalEl.addEventListener('show.bs.modal', function() {
                if (studentFieldsContainer.children.length === 0) {
                    addNewStudentField();
                }
            });

            // Xóa các trường cũ khi modal đóng lại
            addFamilyModalEl.addEventListener('hidden.bs.modal', function() {
                studentFieldsContainer.innerHTML = '';
                document.getElementById('add-family-form').reset();
                document.getElementById('add-family-alert').classList.add('d-none');
            });

            $('#add-family-form').on('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                formData.append('action', 'add_new_family');
                const alertEl = $('#add-family-alert');

                $.ajax({
                    url: 'ajax_handler.php',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    dataType: 'json'
                }).done(data => {
                    alertEl.text(data.message).removeClass('d-none alert-danger alert-success').addClass(data.success ? 'alert-success' : 'alert-danger');
                    if (data.success) {
                        setTimeout(() => {
                            addFamilyModal.hide();
                            window.location.href = 'dashboard.php?tab=accounts';
                        }, 1500);
                    }
                }).fail(() => alertEl.text('Lỗi máy chủ.').removeClass('d-none').addClass('alert-danger'));
            });
        }
        const pendingPaymentsTable = document.getElementById('pending-payments-table');
        if (pendingPaymentsTable) {
            pendingPaymentsTable.addEventListener('click', function(e) {
                if (e.target.closest('.confirm-payment-btn')) {
                    const button = e.target.closest('.confirm-payment-btn');
                    const paymentId = button.dataset.paymentId;

                    if (confirm('Bạn có chắc chắn muốn xác nhận khoản thanh toán này?')) {
                        const formData = new FormData();
                        formData.append('action', 'confirm_payment');
                        formData.append('payment_id', paymentId);

                        fetch('ajax_handler.php', {
                                method: 'POST',
                                body: formData
                            })
                            .then(response => response.json())
                            .then(data => {
                                alert(data.message);
                                if (data.success) {
                                    window.location.reload(); // Tải lại trang để cập nhật danh sách
                                }
                            })
                            .catch(() => alert('Lỗi kết nối máy chủ.'));
                    }
                }
            });
        }

    });
</script>
